{"version":3,"file":"ng-event-bus.js","sources":["../../src/lib/ng-event-bus.ts","../../../src/public-api.ts","../../../src/ng-event-bus.ts"],"sourcesContent":["import { Observable, Subject } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nimport { IEventBusMessage } from './i-event-bus-message';\n\n/**\n * Main library class.\n *\n * @author Cristiam Mercado\n * @since 2.0.0\n * @version 2.0.0\n */\nexport class NgEventBus {\n  /**\n   * Main observable to multicast to all observers.\n   */\n  private eventBus: Subject<IEventBusMessage>;\n\n  /**\n   * Key message separator.\n   */\n  private separator = ':';\n\n  /**\n   * Constructor for this class: Initializes event bus.\n   */\n  constructor() {\n    this.eventBus = new Subject<IEventBusMessage>();\n  }\n\n  /**\n   * Validates key matching.\n   *\n   * @param  key Key to identify the message/event.\n   * @param wildcard Wildcard received from on method.\n   *\n   * @return true if key matches, false otherwise.\n   */\n  public keyMatch(key: string, wildcard: string): boolean {\n    const w = '*';\n    const ww = '**';\n\n    const partMatch = (wl: string, k: string): boolean => {\n      return wl === w || wl === k;\n    };\n\n    const sep = this.separator;\n    const kArr = key.split(sep);\n    const wArr = wildcard.split(sep);\n\n    const kLen = kArr.length;\n    const wLen = wArr.length;\n    const max = Math.max(kLen, wLen);\n\n    for (let i = 0; i < max; i++) {\n      const cK = kArr[i];\n      const cW = wArr[i];\n\n      if (cW === ww && typeof cK !== 'undefined') {\n        return true;\n      }\n\n      if (!partMatch(cW, cK)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Publish a message/event to event bus.\n   *\n   * @param  key Key to identify the message/event.\n   * @param  [data] Optional: Additional data sent with the message/event.\n   * @throws {Error} key parameter must be a string and must not be empty.\n   */\n  public cast(key: string, data?: any): void {\n    if (!key.length) {\n      throw new Error('key parameter must be a string and must not be empty');\n    }\n\n    this.eventBus.next({ key, data });\n  }\n\n  /**\n   * Returns an observable you can subscribe to listen messages/events.\n   *\n   * @param key Key to identify the message/event.\n   *\n   * @return Observable you can subscribe to listen messages/events.\n   */\n  public on<T>(key: string): Observable<T> {\n    return this.eventBus.asObservable().pipe(\n      filter((event: IEventBusMessage) => this.keyMatch(event.key, key)),\n      map((event: any) => event.data as T)\n    );\n  }\n}\n","/*\n * Public API Surface of ng-event-bus\n */\nexport * from './lib/ng-event-bus';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;;AAKA;;;;;;;MAOa,UAAU;;;;IAcrB;;;;QALQ,cAAS,GAAG,GAAG,CAAC;QAMtB,IAAI,CAAC,QAAQ,GAAG,IAAI,OAAO,EAAoB,CAAC;KACjD;;;;;;;;;IAUM,QAAQ,CAAC,GAAW,EAAE,QAAgB;QAC3C,MAAM,CAAC,GAAG,GAAG,CAAC;QACd,MAAM,EAAE,GAAG,IAAI,CAAC;QAEhB,MAAM,SAAS,GAAG,CAAC,EAAU,EAAE,CAAS;YACtC,OAAO,EAAE,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;SAC7B,CAAC;QAEF,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC;QAC3B,MAAM,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC5B,MAAM,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAEjC,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC;QACzB,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC;QACzB,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAEjC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;YAC5B,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YACnB,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YAEnB,IAAI,EAAE,KAAK,EAAE,IAAI,OAAO,EAAE,KAAK,WAAW,EAAE;gBAC1C,OAAO,IAAI,CAAC;aACb;YAED,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE;gBACtB,OAAO,KAAK,CAAC;aACd;SACF;QAED,OAAO,IAAI,CAAC;KACb;;;;;;;;IASM,IAAI,CAAC,GAAW,EAAE,IAAU;QACjC,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE;YACf,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;SACzE;QAED,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;KACnC;;;;;;;;IASM,EAAE,CAAI,GAAW;QACtB,OAAO,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC,IAAI,CACtC,MAAM,CAAC,CAAC,KAAuB,KAAK,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,EAClE,GAAG,CAAC,CAAC,KAAU,KAAK,KAAK,CAAC,IAAS,CAAC,CACrC,CAAC;KACH;;;ACjGH;;;;ACAA;;;;;;"}