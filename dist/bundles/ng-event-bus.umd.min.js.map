{"version":3,"sources":["../../src/lib/ng-event-bus.ts"],"names":["NgEventBus","this","separator","eventBus","Subject","prototype","keyMatch","key","wildcard","wl","k","sep","kArr","split","wArr","kLen","length","wLen","max","Math","i","cK","cW","cast","data","Error","next","on","_this","asObservable","pipe","filter","event","map"],"mappings":"qXA0BE,SAAAA,IALQC,KAAAC,UAAY,IAMlBD,KAAKE,SAAW,IAAIC,EAAAA,eAWfJ,EAAAK,UAAAC,SAAA,SAASC,EAAaC,GAgB3B,IAfA,IAGmBC,EAAYC,EAIzBC,EAAMV,KAAKC,UACXU,EAAOL,EAAIM,MAAMF,GACjBG,EAAON,EAASK,MAAMF,GAEtBI,EAAOH,EAAKI,OACZC,EAAOH,EAAKE,OACZE,EAAMC,KAAKD,IAAIH,EAAME,GAElBG,EAAI,EAAGA,EAAIF,EAAKE,IAAK,CAC5B,IAAMC,EAAKT,EAAKQ,GACVE,EAAKR,EAAKM,GAEhB,GAlBS,OAkBLE,QAA2B,IAAPD,EACtB,OAAO,EAGT,GApB6BX,EAoBVW,EAvBX,OAGSZ,EAoBFa,IAnBIb,IAAOC,EAoBxB,OAAO,EAIX,OAAO,GAUFV,EAAAK,UAAAkB,KAAA,SAAKhB,EAAaiB,GACvB,IAAKjB,EAAIS,OACP,MAAM,IAAIS,MAAM,wDAGlBxB,KAAKE,SAASuB,KAAK,CAAEnB,IAAGA,EAAEiB,KAAIA,KAUzBxB,EAAAK,UAAAsB,GAAA,SAAMpB,GAAN,IAAAqB,EAAA3B,KACL,OAAOA,KAAKE,SAAS0B,eAAeC,KAClCC,EAAAA,QAAO,SAACC,GAA4B,OAAAJ,EAAKtB,SAAS0B,EAAMzB,IAAKA,MAC7D0B,EAAAA,KAAI,SAACD,GAAe,OAAAA,EAAMR","sourcesContent":["import { Observable, Subject } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nimport { IEventBusMessage } from './i-event-bus-message';\n\n/**\n * Main library class.\n *\n * @author Cristiam Mercado\n * @since 2.0.0\n * @version 2.0.0\n */\nexport class NgEventBus {\n  /**\n   * Main observable to multicast to all observers.\n   */\n  private eventBus: Subject<IEventBusMessage>;\n\n  /**\n   * Key message separator.\n   */\n  private separator = ':';\n\n  /**\n   * Constructor for this class: Initializes event bus.\n   */\n  constructor() {\n    this.eventBus = new Subject<IEventBusMessage>();\n  }\n\n  /**\n   * Validates key matching.\n   *\n   * @param  key Key to identify the message/event.\n   * @param wildcard Wildcard received from on method.\n   *\n   * @return true if key matches, false otherwise.\n   */\n  public keyMatch(key: string, wildcard: string): boolean {\n    const w = '*';\n    const ww = '**';\n\n    const partMatch = (wl: string, k: string): boolean => {\n      return wl === w || wl === k;\n    };\n\n    const sep = this.separator;\n    const kArr = key.split(sep);\n    const wArr = wildcard.split(sep);\n\n    const kLen = kArr.length;\n    const wLen = wArr.length;\n    const max = Math.max(kLen, wLen);\n\n    for (let i = 0; i < max; i++) {\n      const cK = kArr[i];\n      const cW = wArr[i];\n\n      if (cW === ww && typeof cK !== 'undefined') {\n        return true;\n      }\n\n      if (!partMatch(cW, cK)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Publish a message/event to event bus.\n   *\n   * @param  key Key to identify the message/event.\n   * @param  [data] Optional: Additional data sent with the message/event.\n   * @throws {Error} key parameter must be a string and must not be empty.\n   */\n  public cast(key: string, data?: any): void {\n    if (!key.length) {\n      throw new Error('key parameter must be a string and must not be empty');\n    }\n\n    this.eventBus.next({ key, data });\n  }\n\n  /**\n   * Returns an observable you can subscribe to listen messages/events.\n   *\n   * @param key Key to identify the message/event.\n   *\n   * @return Observable you can subscribe to listen messages/events.\n   */\n  public on<T>(key: string): Observable<T> {\n    return this.eventBus.asObservable().pipe(\n      filter((event: IEventBusMessage) => this.keyMatch(event.key, key)),\n      map((event: any) => event.data as T)\n    );\n  }\n}\n"]}